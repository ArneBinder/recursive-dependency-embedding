FROM ubuntu:16.04

# adapted https://raw.githubusercontent.com/tensorflow/tensorflow/master/tensorflow/tools/docker/Dockerfile.devel
# to include Tensorflow Fold
LABEL maintainer="Arne Binder <arne.b.binder@gmail.com>"

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        gosu \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        mlocate \
        pkg-config \
        python-dev \
        python-pip \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        wget \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && pip --no-cache-dir install --upgrade pip \
    && pip --no-cache-dir install wheel numpy six setuptools


# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.5.4
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh


########################################
# get TensorFlow Fold and TensorFlow   #
########################################

# fold with tensorflow 1.1 (works):
#ARG TD_BRANCH=7c498a4   
# fold with tensorflow 1.3:
#ARG TD_BRANCH=b6ee778
ARG TD_BRANCH=af06b85 
# fold with tensorflow 1.4:
#ARG TD_BRANCH=cc9bcef

RUN echo use TD_BRANCH=${TD_BRANCH}

RUN git clone --recurse-submodules https://github.com/tensorflow/fold \
    && cd fold && git checkout ${TD_BRANCH} \
    && git submodule update --recursive

#RUN cd /fold/tensorflow && tensorflow/tools/ci_build/builds/configured CPU
# necessary to find "configure" script when executing "configured" (re-check!)
WORKDIR /fold/tensorflow
ENV TF_NEED_MKL=1
# updatedb, otherwise locate (when downloading MKL) is not working 
RUN updatedb && tensorflow/tools/ci_build/builds/configured CPU

#ARG BUILD_CMD='bazel build --verbose_failures --config=opt --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0"'
#RUN echo BUILD_CMD=${BUILD_CMD}

ARG WHEEL_OUT=/wheel_pkg

WORKDIR /fold

RUN export PYTHON_BIN_PATH="$(which python)" \
    && bazel build --verbose_failures --config=opt --config=mkl --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" //tensorflow_fold/util:build_pip_package \
    && bazel-bin/tensorflow_fold/util/build_pip_package ${WHEEL_OUT}/fold_pkg \
    && cd /fold/tensorflow \
    && bazel build --verbose_failures --config=opt --config=mkl --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" //tensorflow/tools/pip_package:build_pip_package \
    && bazel-bin/tensorflow/tools/pip_package/build_pip_package ${WHEEL_OUT}/tensorflow_pkg \
    && pip --no-cache-dir install ${WHEEL_OUT}/fold_pkg/* && pip --no-cache-dir install ${WHEEL_OUT}/tensorflow_pkg/* \
    && rm -rf /tmp && rm -rf /root/.cache

## NOTE: overwrite when building this image
ARG OWN_LOCATION=.
RUN echo "OWN_LOCATION=$OWN_LOCATION"
ARG PROJECT_ROOT=/root/project
RUN echo "PROJECT_ROOT=$PROJECT_ROOT"

RUN mkdir "$PROJECT_ROOT"
RUN chmod 777 /root
COPY docker/set-user-with-folder.sh /root/set-user-with-folder.sh
RUN chmod +x /root/set-user-with-folder.sh

COPY "$OWN_LOCATION"/requirements.txt "$PROJECT_ROOT"/requirements.txt
RUN pip install --no-cache-dir -r "$PROJECT_ROOT"/requirements.txt

COPY src "$PROJECT_ROOT"/src

WORKDIR "$PROJECT_ROOT"/src

# TensorBoard
EXPOSE 6006
# jupyter notebook
EXPOSE 8888

VOLUME /root/train

ENTRYPOINT ["/root/set-user-with-folder.sh", "/root/train", "python", "train_fold.py"]

