FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04

MAINTAINER Craig Citro <craigcitro@google.com>

RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        gosu \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        wget \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# TODO: try using default python kernel?
RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        && \
    python -m ipykernel.kernelspec

# Set up our notebook config.
#COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly:
#   https://github.com/ipython/ipython/issues/7062
# We just add a little wrapper script.
#COPY run_jupyter.sh /

# Set up Bazel.

# Running bazel inside a `docker build` command causes trouble, cf:
#   https://github.com/bazelbuild/bazel/issues/134
# The easiest solution is to set up a bazelrc file forcing --batch.
RUN echo "startup --batch" >>/etc/bazel.bazelrc
# Similarly, we need to workaround sandboxing issues:
#   https://github.com/bazelbuild/bazel/issues/418
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
    >>/etc/bazel.bazelrc
# Install the most recent bazel release.
ENV BAZEL_VERSION 0.5.0
WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

########################################
# get TensorFlow Fold and TensorFlow   #
########################################

# fold with tensorflow 1.1 (works):
#ARG TD_BRANCH=7c498a4
# fold with tensorflow 1.3:
#ARG TD_BRANCH=b6ee778
ARG TD_BRANCH=af06b85
# fold with tensorflow 1.4:
#ARG TD_BRANCH=cc9bcef

RUN echo use TD_BRANCH=${TD_BRANCH}

RUN git clone --recurse-submodules https://github.com/tensorflow/fold \
    && cd fold && git checkout ${TD_BRANCH} \
    && git submodule update --recursive

#RUN cd /fold/tensorflow && tensorflow/tools/ci_build/builds/configured CPU
# necessary to find "configure" script when executing "configured" (re-check!)
WORKDIR /fold/tensorflow

# Configure the build for our CUDA configuration.
ENV CI_BUILD_PYTHON python
ENV LD_LIBRARY_PATH /usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
ENV TF_NEED_CUDA 1
ENV TF_CUDA_COMPUTE_CAPABILITIES=3.0,3.5,5.2,6.0,6.1

ARG WHEEL_OUT=/wheel_pkg

RUN tensorflow/tools/ci_build/builds/configured GPU
## FIX for nccl not found. see https://github.com/tensorflow/serving/issues/336
## and https://github.com/tensorflow/serving/issues/327#issuecomment-305771708
WORKDIR /
RUN git clone https://github.com/NVIDIA/nccl.git
WORKDIR /nccl
RUN make CUDA_HOME=/usr/local/cuda
RUN make install
RUN mkdir -p /usr/local/include/external/nccl_archive/src
RUN ln -s /usr/local/include/nccl.h /usr/local/include/external/nccl_archive/src/nccl.h
## FIX end
WORKDIR /fold
RUN echo "import %workspace%/tensorflow/.tf_configure.bazelrc" > .bazelrc
RUN bazel build --verbose_failures -c opt --config=opt --config=cuda --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" tensorflow_fold/util:build_pip_package
RUN bazel-bin/tensorflow_fold/util/build_pip_package ${WHEEL_OUT}/fold_pkg
WORKDIR /fold/tensorflow
RUN bazel build --verbose_failures -c opt --config=opt --config=cuda --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" tensorflow/tools/pip_package:build_pip_package
RUN bazel-bin/tensorflow/tools/pip_package/build_pip_package ${WHEEL_OUT}/tensorflow_pkg
#RUN pip --no-cache-dir install --upgrade ${WHEEL_OUT}/tensorflow_pkg/* ${WHEEL_OUT}/fold_pkg/*
#RUN rm -rf /root/.cache
# Clean up pip wheel and Bazel cache when done.



FROM nvidia/cuda:8.0-cudnn6-devel-ubuntu16.04

#RUN apt-get update && apt-get install -y --no-install-recommends \
#        curl \
#        git \
#        gosu \
#        libcurl3-dev \
#        python-dev \
#        unzip \
#        zip \
#        wget \
#        && \
#    apt-get clean && \
#    rm -rf /var/lib/apt/lists/*
RUN apt-get update && apt-get install -y --no-install-recommends \
        build-essential \
        curl \
        git \
        gosu \
        libcurl3-dev \
        libfreetype6-dev \
        libpng12-dev \
        libzmq3-dev \
        pkg-config \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev \
        openjdk-8-jdk \
        openjdk-8-jre-headless \
        wget \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

RUN curl -fSsL -O https://bootstrap.pypa.io/get-pip.py && \
    python get-pip.py && \
    rm get-pip.py

# TODO: try using default python kernel? but use same as above!
RUN pip --no-cache-dir install \
        ipykernel \
        jupyter \
        matplotlib \
        numpy \
        scipy \
        sklearn \
        pandas \
        && \
    python -m ipykernel.kernelspec

## NOTE: ensure WHEEL_OUT_2 is the same as above (WHEEL_OUT)
# TODO: improve this
ARG WHEEL_OUT_2=/wheel_pkg

COPY --from=0 ${WHEEL_OUT_2} ${WHEEL_OUT_2}
RUN pip --no-cache-dir install --upgrade ${WHEEL_OUT_2}/tensorflow_pkg/* ${WHEEL_OUT_2}/fold_pkg/*

WORKDIR /root

# TensorBoard
EXPOSE 6006
# IPython
EXPOSE 8888

RUN ["/bin/bash"]